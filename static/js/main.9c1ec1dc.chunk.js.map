{"version":3,"sources":["components/ZipForm.js","components/WeatherListItem.js","components/WeatherList.js","components/App.js","components/CurrentDay.js","serviceWorker.js","index.js"],"names":["ZipForm","props","state","zipcode","inputChanged","bind","submitZipCode","e","value","target","this","setState","preventDefault","onSubmit","className","id","htmlFor","onChange","type","name","required","Component","WeatherListItem","forecastDay","date","Date","dt","weekday","class","getMonth","getDate","minTemp","toFixed","maxTemp","WeatherList","forecastDays","map","index","key","App","city","forecast","simpleForecast","selectedDate","url","apikey","googleApiKey","googleMapsUrl","onFormSubmit","fetch","then","response","json","data","list","coord","lat","lon","console","log","timezoneOffset","rawOffset","dstOffset","parseForecast","catch","googleError","alert","error","firstDate","localHours","getUTCHours","Math","round","abs","indexOfMidnight","min","main","temp_min","i","max","temp_max","getIndexOfMidnight","length","oneDay","getWeekday","temp","findMinTemp","findMaxTemp","morningTemp","dayTemp","eveningTemp","nightTemp","description","weather","icon","pressure","wind","speed","humidity","push","getDay","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c1ec1dc.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './App.css';\r\n\r\nclass ZipForm extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      zipcode: ''\r\n  };\r\n  \r\n  this.inputChanged=this.inputChanged.bind(this);\r\n  this.submitZipCode=this.submitZipCode.bind(this);\r\n  }\r\n  inputChanged(e) {\r\n      const{value} = e.target;\r\n      this.setState( {zipcode: value} \r\n  );}\r\n  \r\n    submitZipCode(e) {\r\n      e.preventDefault(); // donâ€™t submit the form\r\n      const{ zipcode} = this.state; // get the zipcodefrom the state\r\n      const{ onSubmit} = this.props; //  the method from the App \r\n      onSubmit(zipcode); // the form calls a method on the App and passes the zipcode\r\n      this.setState( {zipcode: \"\"} ); // clear  the zipcodein the class (and on the web page)\r\n\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"zip-form\">\r\n      <form onSubmit={this.submitZipCode} id=\"zipForm\">\r\n        <div className=\"flex-parent\">\r\n            <label htmlFor=\"zipcode\">Zip</label>\r\n            <input onChange={this.inputChanged} \r\n            className=\"form-control\" type=\"input\"\r\n             id=\"zipcode\" name=\"zipcode\"  \r\n             value={this.state.zipcode} required />\r\n            <button type=\"submit\" className=\"btn btn-success\"> Get the forcast!</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\n\r\nexport default ZipForm;\r\n","import React, {Component} from 'react';\r\n\r\nimport './App.css';\r\n\r\nclass WeatherListItem extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n\r\n    };\r\n  }\r\n  render() {\r\n    const { forecastDay } = this.props;\r\n    const date = new Date(forecastDay.dt * 1000);\r\n    const weekday = forecastDay.weekday;//this.getWeekday(date);\r\n    return (\r\n        <div class=\"weather-list-item\">\r\n            <h2>{date.getMonth() + 1} / {date.getDate()}</h2>\r\n            <h3>{weekday}</h3>\r\n            <h3>{forecastDay.minTemp.toFixed(1)}&deg;F &#124; {forecastDay.maxTemp.toFixed(1)}&deg;F</h3>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherListItem;\r\n","import React, {Component} from 'react';\r\n\r\nimport './App.css';\r\nimport WeatherListItem from './WeatherListItem.js'\r\n\r\nclass WeatherList extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n\r\n    };\r\n  }\r\n  render () {\r\n    const { forecastDays } = this.props;\r\n    return (\r\n        <div className=\"weather-list flex-parent\">\r\n            { forecastDays.map((forecastDay, index) =>\r\n                <WeatherListItem\r\n                    key={forecastDay.dt}\r\n                    forecastDay={forecastDay}\r\n                    index={index}\r\n                />\r\n            ) }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherList;\r\n","import React, {Component} from 'react';\n\nimport './App.css';\nimport ZipForm from './ZipForm';\nimport WeatherList from './WeatherList';\nimport WeatherListItem from './WeatherListItem';\nimport CurrentDay from './CurrentDay';\n\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n        \n        zipcode: \"\",\n        city: {},\n        forecast: [],\n        simpleForecast: [], \n        selectedDate: null\n      };\n      this.url = \"http://api.openweathermap.org/data/2.5/forecast?zip=\";\n      this.apikey = \"&units=imperial&appid=790313f6498a01d239eb571b24ad99d7\";\n  \n      this.googleApiKey = \"AIzaSyC1HTCZ6mUEKFuuLHPLdE1zM2_Q7j0vxhk\";\n      this.googleMapsUrl = \"https://maps.googleapis.com/maps/api/timezone/json?location=\";\n  \n      this.onFormSubmit= this.onFormSubmit.bind(this);\n    }\n    onFormSubmit(zipcode) {\n      fetch(`${this.url}${zipcode}${this.apikey}`)\n        .then(response => response.json())\n          .then(data => { \n              const {city, list: forecast } = data; \n              fetch(`${this.googleMapsUrl}\n                  ${city.coord.lat},${city.coord.lon}\n                  &timestamp=${forecast[0].dt}\n                  &key=${this.googleApiKey}`)\n              .then(response => response.json())\n              .then(data => {\n                  console.log(data);\n                  const timezoneOffset =  (data.rawOffset + data.dstOffset) / (60 * 60);\n                  const simpleForecast = this.parseForecast(forecast, timezoneOffset);\n                  zipcode = \"\"; \n                  this.setState({zipcode, city, forecast, simpleForecast, timezoneOffset, selectedDate: null});         \n              })\n              .catch(googleError => {\n                  alert('There was a problem getting timezone info!')\n              });\n          })\n          .catch(error => {\n              alert('There was a problem getting info!'); \n          });\n      this.setState( {zipcode} ); //or {zipcode: zipcode}\n    }\n    \nrender() {\n      const { simpleForecast, city, selectedDate } = this.state;\n      return (\n        <div id=\"app-container\">\n          <div className=\"app\">\n            <ZipForm onSubmit={this.onFormSubmit}/>\n            <WeatherList forecastDays={simpleForecast}/>\n          </div>\n        </div>\n      );\n    }\n\n    getIndexOfMidnight(firstDate, timezoneOffset) {\n      let dt = firstDate * 1000;\n      let date = new Date(dt);\n      let utcHours = date.getUTCHours();\n      let localHours = utcHours + timezoneOffset;\n      let firstMidnightIndex = (localHours > 2 ) ? \n          Math.round((24 - localHours)/3) : \n          Math.abs(Math.round(localHours / 3));\n      return firstMidnightIndex;\n    }\n  \n    findMinTemp(forecast, indexOfMidnight) {\n      let min = forecast[indexOfMidnight].main.temp_min;\n      for (let i = indexOfMidnight + 1; i < indexOfMidnight + 8; i++)\n        if (forecast[i].main.temp_min < min)\n          min = forecast[i].main.temp_min;\n      return min;\n    }\n  \n    findMaxTemp(forecast, indexOfMidnight) {\n      let max = forecast[indexOfMidnight].main.temp_max;\n      for (let i = indexOfMidnight + 1; i < indexOfMidnight + 8; i++)\n        if (forecast[i].main.temp_max > max)\n          max = forecast[i].main.temp_max;\n      return max;\n    }\n  \n    parseForecast(forecast, timezoneOffset) {\n      let simpleForecast = [];\n      const MIDNIGHT = this.getIndexOfMidnight(forecast[0].dt, timezoneOffset);\n      const NOON = 4;\n      const SIXAM = 2;\n      const SIXPM = 6;\n      const NINEPM = 7;\n      const MORNING = SIXAM;\n      const DAY = NOON;\n      const EVENING = SIXPM;\n      const NIGHT = NINEPM;\n      const PERDAY = 8;\n      const DAYS = 4;\n      for (let i = MIDNIGHT; i < forecast.length - NINEPM; i+=PERDAY) {\n        let oneDay = {};\n        oneDay.dt = forecast[i + NOON].dt;\n        oneDay.weekday= this.getWeekday(new Date(oneDay.dt * 1000));\n        oneDay.temp = forecast[i + NOON].main.temp;\n        oneDay.minTemp = this.findMinTemp(forecast, i);\n        oneDay.maxTemp = this.findMaxTemp(forecast, i);\n        oneDay.morningTemp = forecast[i + MORNING].main.temp;\n        oneDay.dayTemp = forecast[i + DAYS].main.temp;\n        oneDay.eveningTemp = forecast[i + EVENING].main.temp;\n        oneDay.nightTemp = forecast[i + NIGHT].main.temp;\n        oneDay.description = forecast[i + NOON].weather[0].description;\n        oneDay.icon = forecast[i + NOON].weather[0].icon;\n        oneDay.pressure = forecast[i + NOON].main.pressure;\n        oneDay.wind = forecast[i + NOON].wind.speed;\n        oneDay.humidity = forecast[i + NOON].main.humidity;\n        simpleForecast.push(oneDay);\n      }\n      return simpleForecast;\n    }\n  \n    getWeekday(date) {\n      const dayNames = ['Sunday','Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      const weekday = date.getDay();\n      return dayNames[weekday];\n    }\n  \n}\n\nexport default App;\n","import React, {Component} from 'react';\r\n\r\nimport './App.css';\r\n\r\nclass CurrentDay extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n\r\n    };\r\n  }\r\n  render(){\r\n    return(\r\n      <div>This is the App Current Day</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentDay;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}