{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","xIsNext","winner","squares","Array","fill","winningLine","lines","handleClick","bind","i","className","this","eventHandler","id","onClick","event","console","log","target","Object","assign","theWinner","calculateWinner","setState","player","status","renderSquare","length","a","b","c","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTA6FeA,G,kBAzFb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACXC,SAAS,EACTC,OAAQ,KACRC,QAASC,MAAM,GAAGC,KAAK,MACvBC,YAAa,IAEf,EAAKC,MAAQ,CACT,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEP,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAlBL,E,0EAqBPC,GACX,IAAMC,EAAsC,MAAzBC,KAAKZ,MAAMG,QAAQO,GAAc,SAC1B,MAArBE,KAAKZ,MAAME,QAAkBU,KAAKZ,MAAME,SAAWU,KAAKZ,MAAMG,QAAQO,GACvE,gBAAkB,cAEhBG,EADgC,MAArBD,KAAKZ,MAAME,QAA2C,MAAzBU,KAAKZ,MAAMG,QAAQO,GACjCE,KAAKJ,YAAc,aAMnD,OAJI,yBAAKG,UAAWA,EAAWG,GAAIJ,EAC3BK,QAASF,GACkB,MAAzBD,KAAKZ,MAAMG,QAAQO,GAAcE,KAAKZ,MAAMG,QAAQO,GAAK,M,kCAKzDM,GACVC,QAAQC,IAAIF,EAAMG,QAClB,IAAMT,EAAIM,EAAMG,OAAOL,GACnBX,EAAUiB,OAAOC,OAAO,GAAIT,KAAKZ,MAAMG,SAC3CA,EAAQO,GAAKE,KAAKZ,MAAMC,QAAU,IAAM,IACxC,IAAMqB,EAAYV,KAAKW,gBAAgBpB,GACvCS,KAAKY,SAAS,CACZrB,QAASA,EACTF,SAAUW,KAAKZ,MAAMC,QACrBC,OAAQoB,EAAUG,OAClBnB,YAAagB,EAAUhB,gB,+BAKzB,IAAIoB,EAOJ,OALEA,EADEd,KAAKZ,MAAME,OACJ,WAAaU,KAAKZ,MAAME,OAExB,iBAAmBU,KAAKZ,MAAMC,QAAU,IAAM,KAItD,6BACG,yBAAKU,UAAU,UAAUe,GACzB,yBAAKf,UAAU,OACVC,KAAKe,aAAa,GAAIf,KAAKe,aAAa,GAAIf,KAAKe,aAAa,IAEnE,yBAAKhB,UAAU,OACVC,KAAKe,aAAa,GAAIf,KAAKe,aAAa,GAAIf,KAAKe,aAAa,IAEnE,yBAAKhB,UAAU,OACVC,KAAKe,aAAa,GAAIf,KAAKe,aAAa,GAAIf,KAAKe,aAAa,O,sCAO3DxB,GACd,IAAK,IAAIO,EAAI,EAAGA,EAAIE,KAAKL,MAAMqB,OAAQlB,IAAK,CAAC,IAAD,cACtBE,KAAKL,MAAMG,GADW,GACjCmB,EADiC,KAC9BC,EAD8B,KAC3BC,EAD2B,KAExC,GAAI5B,EAAQ0B,IACZ1B,EAAQ0B,KAAO1B,EAAQ2B,IACvB3B,EAAQ0B,KAAO1B,EAAQ4B,GACrB,MAAO,CAACN,OAAQtB,EAAQ0B,GAAIvB,YAAaM,KAAKL,MAAMG,IAG1D,MAAO,CAACe,OAAQ,KAAMnB,YAAa,Q,GApFrB0B,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a8fb3683.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      xIsNext: true,\n      winner: null,\n      squares: Array(9).fill(null),\n      winningLine: []\n    };\n    this.lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n        ];\n        this.handleClick = this.handleClick.bind(this);\n  }\n\n  renderSquare(i) {\n    const className = (this.state.squares[i] == null) ? \"square\" :\n        (this.state.winner != null && this.state.winner === this.state.squares[i]) ? \n        \"square-winner\" : \"square-full\";\n    const enabled = (this.state.winner == null && this.state.squares[i] == null) ? true : false;\n    const eventHandler = (enabled)? this.handleClick : ()=>{};\n    const output = \n        <div className={className} id={i}\n            onClick={eventHandler}>\n            {(this.state.squares[i] != null) ? this.state.squares[i] : \"\"}\n        </div>;   \n    return output;\n  }\n\n  handleClick(event) {\n    console.log(event.target);\n    const i = event.target.id;\n    let squares = Object.assign({}, this.state.squares);\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    const theWinner = this.calculateWinner(squares);\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n      winner: theWinner.player,\n      winningLine: theWinner.winningLine\n    }); \n  }\n\n  render() {\n    let status;\n    if (this.state.winner) {\n      status = 'Winner: ' + this.state.winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n}\n\n    return ( \n       <div>\n          <div className=\"status\">{status}</div>\n          <div className=\"row\">\n              {this.renderSquare(0)}{this.renderSquare(1)}{this.renderSquare(2)}\n          </div>\n          <div className=\"row\">\n              {this.renderSquare(3)}{this.renderSquare(4)}{this.renderSquare(5)}\n          </div>\n          <div className=\"row\">\n              {this.renderSquare(6)}{this.renderSquare(7)}{this.renderSquare(8)}\n          </div>\n        </div>\n    );\n        \n  }\n\n  calculateWinner(squares) {\n    for (let i = 0; i < this.lines.length; i++) {\n        const [a, b, c] = this.lines[i];       \n        if (squares[a] && \n        squares[a] === squares[b] && \n        squares[a] === squares[c]) {\n          return {player: squares[a], winningLine: this.lines[i]}; \n        }\n    }\n    return {player: null, winningLine: []};\n}\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}